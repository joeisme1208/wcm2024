var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0 https://joeisme1208.github.io/wcm2024/ \n 網誌:  https://joeisme1208.github.io/wcm2024/blog \n 簡報:  https://joeisme1208.github.io/wcm2024/reveal \n 倉儲:\xa0 https://github.com/joeisme1208/wcm2024 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Codespaces', 'text': 'https://joeisme1208.github.io/wcm2024 \n \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'W6', 'text': 'git 的發展歷史: \n \n \n 創建 Git：  在 2005 年，Linus Torvalds 開始尋找一個更好的版本控制系統來管理 Linux 內核的開發。由於對當時版本控制系統的限制和不滿，他決定自行開發一個新的系統。這就是 Git 的誕生。 \n \n \n 首次公開發布：  Git 在 2005 年 4 月首次公開發布。這個版本還比較初步，但足以開始在 Linux 內核開發中使用。 \n \n \n 社區參與：  隨著時間的推移，越來越多的開發者開始參與 Git 的開發和改進。這些貢獻者在整個項目的發展中起著重要作用。 \n \n \n GitHub 的出現：  2008 年 GitHub 成立，提供了一個基於 Git 的免費代碼託管平台。GitHub 的出現大大促進了 Git 的普及和使用。 \n \n \n 持續改進：  Git 團隊不斷改進和優化 Git，添加新功能，修復錯誤並提高性能。這些改進通過不斷的版本更新進行。 \n \n \n 流行度增加：  Git 在軟件開發和其他領域中的使用越來越普遍。許多大型公司和開源項目都採用了 Git 作為其首選的版本控制系統。 \n \n \n Git 協議的標準化：  Git 協議在社區的共同努力下逐漸標準化，這有助於不同 Git 客戶端之間的互操作性。 \n \n \n 持續發展：  至今，Git 仍然在持續發展和改進中。新的功能不斷被添加，bug 不斷被修復，以滿足不斷變化的需求和技術環境。 \n \n \n \n git創作人的相關履歷: \n Git 的創始人是 Linus Torvalds，以下是 Linus Torvalds 的相關履歷： \n \n \n 出生與教育：  Linus Benedict Torvalds 於 1969 年 12 月 28 日出生在芬蘭赫爾辛基。他在赫爾辛基大學就讀，並於 1996 年獲得電腦科學學士學位。 \n \n \n Linux 內核：  在大學期間，Torvalds 開始編寫 Linux 操作系統的核心，最初是作為業餘項目。1991 年，他發布了第一個版本的 Linux 內核，從此開啟了 Linux 的發展歷程。 \n \n \n Git 的創建：  在 Linux 開發過程中，Torvalds 遇到了對於當時版本控制系統的限制和不滿。因此，他在 2005 年創建了 Git，一個分散式版本控制系統，用於管理 Linux 內核的開發。他的目標是創建一個快速、高效、強大且易於使用的版本控制系統。 \n \n \n 開源社區的領導者：  Torvalds 作為 Linux 和 Git 開源項目的創建者和主要維護者，被視為開源社區的領導者之一。他以其開放和協作的態度聞名於世，並受到許多人的尊敬和崇拜。 \n \n \n 技術領域的影響力：  Torvalds 的工作對於計算機科學和軟件工程領域有著深遠的影響。Linux 操作系統和 Git 版本控制系統成為了許多人的學習和研究對象，並在工業界廣泛應用。 \n \n \n \n 如何利用 git 解決內容管理問題: \n \n \n 版本控制：  Git 可以跟蹤文件的修改歷史，並記錄每一次修改的詳細信息。這使得團隊成員可以輕鬆地查看和比較不同版本之間的更改，並恢復到之前的版本，從而有效地管理內容的變化。 \n \n \n 分支管理：  Git 允許使用分支來獨立開發和測試新功能，而不影響主要代碼庫。這使得團隊可以同時進行多個任務，並在完成後將更改合併回主分支。 \n \n \n 合併衝突解決：  當多個開發者在同一文件上進行修改時，可能會發生合併衝突。Git 提供了工具和流程來解決這些衝突，例如手動解決衝突、合併請求審查等。 \n \n \n 遠程存儲和共享：  Git 支持將代碼庫存儲在遠程服務器上，如 GitHub、GitLab 或 Bitbucket。這使得團隊成員可以輕鬆地共享代碼、協作開發，並在不同地點工作。 \n \n \n 代碼審查：  Git 提供了諸如分支、提交和合併請求等功能，這些功能可以用於進行代碼審查。團隊成員可以輕鬆地查看和討論代碼更改，並提供反饋和建議。 \n \n \n 持續集成：  Git 可以與持續集成（CI）工具集成，如 Jenkins、Travis CI 或 CircleCI。這使得團隊可以自動化測試和部署代碼，從而提高代碼質量和交付速度。 \n \n \n \n \n', 'tags': '', 'url': 'W6.html'}]};